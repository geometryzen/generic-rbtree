{"version":3,"file":"index.js","sources":["../module/RBTree.js","../module/RBNode.js"],"sourcesContent":["import { RBNode } from './RBNode';\nvar RBTree = (function () {\n    /**\n     * Initializes an RBTree.\n     * It is important to define a key that is smaller than all expected keys\n     * so that the first insert becomes the root (head.r).\n     *\n     * @param lowKey A key that is smaller than all expected keys.\n     * @param highKey A key that is larger than all expected keys.\n     * @param nilValue The value to return when a search is not successful.\n     * @param comp The comparator used for comparing keys.\n     */\n    function RBTree(lowKey, highKey, nilValue, comp) {\n        this.highKey = highKey;\n        this.comp = comp;\n        /**\n         * The number of keys inserted.\n         */\n        this.N = 0;\n        // Notice that z does not have a key because it has to be less than and greater than every other key.\n        var z = new RBNode(null, nilValue);\n        this.head = new RBNode(lowKey, nilValue);\n        // Head left is never used or changed so we'll store the tail node there.\n        this.head.l = z;\n        // Head right refers the the actual tree root which is currently empty.\n        this.head.r = z;\n        this.head.p = this.head;\n    }\n    Object.defineProperty(RBTree.prototype, \"root\", {\n        get: function () {\n            return this.head.r;\n        },\n        set: function (root) {\n            this.head.r = root;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RBTree.prototype, \"z\", {\n        /**\n         * The \"tail\" node.\n         * This allows our subtrees never to be undefined or null.\n         * All searches will result in a node, but misses will return the tail node.\n         */\n        get: function () {\n            return this.head.l;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RBTree.prototype, \"lowKey\", {\n        get: function () {\n            return this.head.key;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Legal means that is greater than the key stored in the head node.\n     * The key does not have to exist.\n     */\n    RBTree.prototype.assertLegalKey = function (key, comp) {\n        if (comp(key, this.lowKey) <= 0) {\n            throw new Error(\"key, \" + key + \", must be greater than the low key, \" + this.lowKey + \".\");\n        }\n        if (comp(key, this.highKey) >= 0) {\n            throw new Error(\"key, \" + key + \", must be less than the high key, \" + this.highKey + \".\");\n        }\n    };\n    /**\n     *\n     */\n    RBTree.prototype.insert = function (key, value) {\n        var comp = this.comp;\n        this.assertLegalKey(key, comp);\n        var n = new RBNode(key, value);\n        rbInsert(this, n, comp);\n        this.root.flag = false;\n        // Update the count of nodes inserted.\n        this.N += 1;\n        return n;\n    };\n    /**\n     * Greatest Lower Bound of a key.\n     * Returns key if it exists, or the next lowest key.\n     * Returns the low key value if there is no smaller key in the tree.\n     */\n    RBTree.prototype.glb = function (key) {\n        var comp = this.comp;\n        this.assertLegalKey(key, comp);\n        return glb(this, this.root, key, comp);\n    };\n    /**\n     * Least Upper Bound of a key.\n     * Returns key if it exists, or the next highest key.\n     * Returns the high key value if there is no greater key in the tree.\n     */\n    RBTree.prototype.lub = function (key) {\n        var comp = this.comp;\n        this.assertLegalKey(key, comp);\n        return lub(this, this.root, key, comp);\n    };\n    /**\n     *\n     */\n    RBTree.prototype.search = function (key) {\n        var comp = this.comp;\n        this.assertLegalKey(key, comp);\n        /**\n         * The current node for the search.\n         */\n        var x = this.root;\n        // The search will always be \"successful\" but may end with z.\n        this.z.key = key;\n        while (comp(key, x.key) !== 0) {\n            x = comp(key, x.key) < 0 ? x.l : x.r;\n        }\n        return x.value;\n    };\n    /**\n     *\n     * @param key\n     */\n    RBTree.prototype.remove = function (key) {\n        var comp = this.comp;\n        this.assertLegalKey(key, comp);\n        var head = this.head;\n        var z = this.z;\n        /**\n         * The current node for the search, we begin at the root.\n         */\n        var x = this.root;\n        /**\n         * The parent of the current node.\n         */\n        var p = head;\n        // The search will always be \"successful\" but may end with z.\n        z.key = key;\n        // Search in the normal way to get p and x.\n        while (comp(key, x.key) !== 0) {\n            p = x;\n            x = comp(key, x.key) < 0 ? x.l : x.r;\n        }\n        // Our search has terminated and x is either the node to be removed or z.\n        /**\n         * A reference to the node that we will be removing.\n         * This may point to z, but the following code also works in that case.\n         */\n        var t = x;\n        // From now on we will be making x reference the node that replaces t.\n        if (t.r === z) {\n            // The node t has no right child.\n            // The node that replaces t will be the left child of t.\n            x = t.l;\n        }\n        else if (t.r.l === z) {\n            // The node t has a right child with no left child.\n            // This empty slot can be used to accept t.l\n            x = t.r;\n            x.l = t.l;\n        }\n        else {\n            // The node with the next highest key must be in the r-l-l-l-l... path with a left child equal to z.\n            // It can't be anywhere else of there would be an intervening key.\n            // Note also that the previous tests have eliminated the case where\n            // there is no highets key. This node with the next highest key must have\n            // the property that it has an empty left child.\n            var c = t.r;\n            while (c.l.l !== z) {\n                c = c.l;\n            }\n            // We exit from the loop when c.l.l equals z, which means that c.l is the node that\n            // we want to use to replace t.\n            x = c.l;\n            c.l = x.r;\n            x.l = t.l;\n            x.r = t.r;\n        }\n        // We can now free the t node (if we need to do so).\n        // Finally, account for whether t was the left or right child of p.\n        if (comp(key, p.key) < 0) {\n            p.l = x;\n        }\n        else {\n            p.r = x;\n        }\n    };\n    Object.defineProperty(RBTree.prototype, \"heightInvariant\", {\n        /**\n         * Determines whether this tree satisfies the height invariant.\n         * The height invariant is that the number of black nodes in every path to leaf nodes should be the same.\n         * This property is for testing only; it traverses the tree and so affects performance.\n         */\n        get: function () {\n            return heightInv(this.root, this.z);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RBTree.prototype, \"colorInvariant\", {\n        /**\n         * Determines whether this tree satisfies the color invarant.\n         * The color invariant is that no two adjacent nodes should be colored red.\n         * This property is for testing only; it traverses the treeand so affects performance.\n         */\n        get: function () {\n            return colorInv(this.root, this.head.flag, this.z);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return RBTree;\n}());\nexport { RBTree };\nfunction colorFlip(p, g, gg) {\n    p.flag = false;\n    g.flag = true;\n    gg.flag = false;\n    return g;\n}\n/**\n * z, x, y are in diamond-left formation.\n * z is the initial leader and is black.\n * x and y are initially red.\n *\n * z moves right and back.\n * y takes the lead.\n * children a,b of y are adopted by x and z.\n * x becomes black.\n *\n *    z          y\n * x    =>    x     z\n *    y        a   b\n *  a   b\n */\nfunction diamondLeftToVic(lead) {\n    var m = lead.p;\n    var z = lead;\n    var x = z.l;\n    var y = x.r;\n    var a = y.l;\n    var b = y.r;\n    x.flag = false;\n    y.l = x;\n    x.p = y;\n    y.r = z;\n    z.p = y;\n    x.r = a;\n    a.p = x;\n    z.l = b;\n    b.p = z;\n    if (m.r === lead) {\n        m.r = y;\n    }\n    else {\n        m.l = y;\n    }\n    y.p = m;\n    return y;\n}\n/**\n * x, z, y are in diamond-right formation.\n * x is the initial leader and is black.\n * z and y are initially red.\n *\n * x moves left and back\n * y takes the lead.\n * z becomes black.\n *\n *    x          y\n *       z => x     z\n *    y        a   b\n *  a   b\n */\nfunction diamondRightToVic(lead) {\n    var m = lead.p;\n    var x = lead;\n    var z = x.r;\n    var y = z.l;\n    var a = y.l;\n    var b = y.r;\n    z.flag = false;\n    y.l = x;\n    x.p = y;\n    y.r = z;\n    z.p = y;\n    x.r = a;\n    a.p = x;\n    z.l = b;\n    b.p = z;\n    if (m.r === lead) {\n        m.r = y;\n    }\n    else {\n        m.l = y;\n    }\n    y.p = m;\n    return y;\n}\nfunction echelonLeftToVic(lead) {\n    var m = lead.p;\n    var z = lead;\n    var y = z.l;\n    var a = y.r;\n    y.l.flag = false;\n    y.r = z;\n    z.p = y;\n    z.l = a;\n    a.p = z;\n    if (m.r === lead) {\n        m.r = y;\n    }\n    else {\n        m.l = y;\n    }\n    y.p = m;\n    return y;\n}\nfunction echelonRightToVic(lead) {\n    var m = lead.p;\n    var x = lead;\n    var y = x.r;\n    var a = y.l;\n    y.r.flag = false;\n    y.l = x;\n    x.p = y;\n    x.r = a;\n    a.p = x;\n    if (m.r === lead) {\n        m.r = y;\n    }\n    else {\n        m.l = y;\n    }\n    y.p = m;\n    return y;\n}\nfunction colorInv(node, redParent, z) {\n    if (node === z) {\n        return true;\n    }\n    else if (redParent && node.flag) {\n        return false;\n    }\n    else {\n        return colorInv(node.l, node.flag, z) && colorInv(node.r, node.flag, z);\n    }\n}\nfunction heightInv(node, z) {\n    return blackHeight(node, z) >= 0;\n}\n/**\n * Computes the number of black nodes (including z) on the path from x to leaf, not counting x.\n * The height does not include itself.\n * z nodes are black.\n */\nfunction blackHeight(x, z) {\n    if (x === z) {\n        return 0;\n    }\n    else {\n        var hL = blackHeight(x.l, z);\n        if (hL >= 0) {\n            var hR = blackHeight(x.r, z);\n            if (hR >= 0) {\n                if (hR === hR) {\n                    return x.flag ? hL : hL + 1;\n                }\n            }\n        }\n        return -1;\n    }\n}\nfunction rbInsert(tree, n, comp) {\n    var key = n.key;\n    var z = tree.z;\n    var x = tree.root;\n    x.p = tree.head;\n    while (x !== z) {\n        x.l.p = x;\n        x.r.p = x;\n        x = comp(key, x.key) < 0 ? x.l : x.r;\n    }\n    n.p = x.p;\n    if (x.p === tree.head) {\n        tree.root = n;\n    }\n    else {\n        if (comp(key, x.p.key) < 0) {\n            x.p.l = n;\n        }\n        else {\n            x.p.r = n;\n        }\n    }\n    n.l = z;\n    n.r = z;\n    if (n.p.flag) {\n        rbInsertFixup(tree, n);\n    }\n    else {\n        n.flag = true;\n    }\n}\n/**\n * In this algorithm we start with the node that has been inserted and make our way up the tree.\n * This requires carefully maintaining parent pointers.\n */\nfunction rbInsertFixup(tree, n) {\n    // When inserting the node (at any place other than the root), we always color it red.\n    // This is so that we don't violate the height invariant.\n    // However, this may violate the color invariant, which we address by recursing back up the tree.\n    n.flag = true;\n    if (!n.p.flag) {\n        throw new Error(\"n.p must be red.\");\n    }\n    while (n.flag) {\n        /**\n         * The parent of n.\n         */\n        var p = n.p;\n        if (n === tree.root) {\n            tree.root.flag = false;\n            return;\n        }\n        else if (p === tree.root) {\n            tree.root.flag = false;\n            return;\n        }\n        /**\n         * The leader of the formation.\n         */\n        var lead = p.p;\n        // Establish the n = red, p = red, g = black condition for a transformation.\n        if (p.flag && !lead.flag) {\n            if (p === lead.l) {\n                var aux = lead.r;\n                if (aux.flag) {\n                    n = colorFlip(p, lead, aux);\n                }\n                else if (n === p.r) {\n                    n = diamondLeftToVic(lead);\n                }\n                else {\n                    n = echelonLeftToVic(lead);\n                }\n            }\n            else {\n                var aux = lead.l;\n                if (aux.flag) {\n                    n = colorFlip(p, lead, aux);\n                }\n                else if (n === n.p.l) {\n                    n = diamondRightToVic(lead);\n                }\n                else {\n                    n = echelonRightToVic(lead);\n                }\n            }\n        }\n        else {\n            break;\n        }\n    }\n    tree.root.flag = false;\n}\n/**\n * Recursive implementation to compute the Greatest Lower Bound.\n * The largest key such that glb <= key.\n */\nfunction glb(tree, node, key, comp) {\n    if (node === tree.z) {\n        return tree.lowKey;\n    }\n    else if (comp(key, node.key) >= 0) {\n        // The node key is a valid lower bound, but may not be the greatest.\n        // Take the right link in search of larger keys.\n        return max(node.key, glb(tree, node.r, key, comp), comp);\n    }\n    else {\n        // Take the left link in search of smaller keys.\n        return glb(tree, node.l, key, comp);\n    }\n}\n/**\n * Recursive implementation to compute the Least Upper Bound.\n * The smallest key such that key <= lub.\n */\nfunction lub(tree, node, key, comp) {\n    if (node === tree.z) {\n        return tree.highKey;\n    }\n    else if (comp(key, node.key) <= 0) {\n        // The node key is a valid upper bound, but may not be the least.\n        return min(node.key, lub(tree, node.l, key, comp), comp);\n    }\n    else {\n        // Take the right link in search of bigger keys.\n        return lub(tree, node.r, key, comp);\n    }\n}\nfunction max(a, b, comp) {\n    if (comp(a, b) > 0) {\n        return a;\n    }\n    else if (comp(a, b) < 0) {\n        return b;\n    }\n    else {\n        return a;\n    }\n}\nfunction min(a, b, comp) {\n    if (comp(a, b) < 0) {\n        return a;\n    }\n    else if (comp(a, b) > 0) {\n        return b;\n    }\n    else {\n        return a;\n    }\n}\n","/**\n *\n */\nvar RBNode = (function () {\n    /**\n     * Constructs a red-black binary tree node.\n     */\n    function RBNode(key, value) {\n        this.key = key;\n        this.value = value;\n        /**\n         * The red (true) / black (false) flag.\n         */\n        this.flag = false;\n        this.l = this;\n        this.r = this;\n        this.p = this;\n    }\n    /*\n    get red(): boolean {\n        return this.flag;\n    }\n    set red(red: boolean) {\n        this.flag = red;\n    }\n    get black(): boolean {\n        return !this.flag;\n    }\n    set black(black: boolean) {\n        this.flag = !black;\n    }\n    */\n    RBNode.prototype.toString = function () {\n        return (this.flag ? 'red' : 'black') + \" \" + this.key;\n    };\n    return RBNode;\n}());\nexport { RBNode };\n"],"names":[],"mappings":"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"}